/*
 * Modernized Gradle build for Tomcat deployment
 */

plugins {
    id 'java'
    id 'war'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.15'
    id 'jacoco'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // Jersey dependencies for Tomcat
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.1.3'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.3'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:3.1.3'
    implementation 'org.glassfish.jersey.core:jersey-server:3.1.3'
    implementation 'org.glassfish.jersey.ext:jersey-mvc-jsp:3.1.3'
    
    // Jakarta EE API (replaces javax)
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'jakarta.activation:jakarta.activation-api:2.1.2'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    
    // JSON processing
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.15.2'
    
    // Utilities
    implementation 'com.google.guava:guava:32.1.3-jre'

    // SpotBugs annotations for suppressing specific warnings where intentional
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.6'

    // AWS SDK for Parameter Store
    implementation 'software.amazon.awssdk:ssm:2.21.29'
    implementation 'software.amazon.awssdk:auth:2.21.29'

    // JSON-B for simple parsing (optional, kept minimal)
    implementation 'org.eclipse:yasson:3.0.3'
    
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.10.0'
    testImplementation 'org.glassfish.jersey.test-framework:jersey-test-framework-core:3.1.3'
    testImplementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:3.1.3'
}

// JSP precompilation using Jasper
configurations {
    jspc
}

dependencies {
    // Use Jasper CLI (JspC) from full Tomcat dist, plus Ant
    jspc 'org.apache.tomcat:tomcat-jasper:10.1.26'
    jspc 'org.apache.tomcat.embed:tomcat-embed-core:10.1.26'
    jspc 'org.apache.tomcat.embed:tomcat-embed-el:10.1.26'
    jspc 'org.eclipse.jdt:ecj:3.37.0'
    jspc 'org.apache.ant:ant:1.10.14'
    jspc 'org.apache.ant:ant-launcher:1.10.14'
    jspc 'jakarta.servlet:jakarta.servlet-api:6.0.0'
}

task precompileJsp(type: JavaExec) {
    group = 'build'
    description = 'Precompile JSPs with Jasper'
    classpath = configurations.jspc
    mainClass = 'org.apache.jasper.JspC'
    def webAppDir = file('src/main/webapp')
    def outDir = file("$buildDir/jsp")
    inputs.dir webAppDir
    outputs.dir outDir
    args = [
            '-uriroot', webAppDir.absolutePath,
            '-p', 'org.apache.jsp',
            '-d', outDir.absolutePath,
            '-compile'
    ]
}

war {
    archiveBaseName = 'ROOT'
    archiveVersion = ''
    // include precompiled JSP classes in the WAR
    from("$buildDir/jsp") {
        into 'WEB-INF/classes'
    }
    dependsOn precompileJsp
}



test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.17.0'
    config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    toolVersion = '4.8.6'
    ignoreFailures = false
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required = false
        html.required = true
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn 'checkstyleMain', 'checkstyleTest', 'spotbugsMain', 'spotbugsTest', 'jacocoTestReport'
